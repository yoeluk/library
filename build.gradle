buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.1'
	id "io.micronaut.application" version "3.4.1"
	id "io.micronaut.aot" version "3.4.1"
	id "com.diffplug.spotless" version "6.2.2"
}

version = "1.0.0"
group = "example.micronaut"

repositories {
	mavenLocal()
	mavenCentral()
}

application {
	mainClass.set("example.micronaut.Application")
}

graalvmNative.toolchainDetection = false

java {
	sourceCompatibility = JavaVersion.toVersion('17')
	targetCompatibility = JavaVersion.toVersion('17')
}

micronaut {
	runtime "netty"
	testRuntime "junit5"
	processing {
		incremental(true)
		annotations("example.micronaut.*")
	}
	aot {
		// optional, override the Micronaut AOT version
		version = "1.0.1"

		// optimizations configuration
		optimizeServiceLoading = true
		convertYamlToJava = true
		precomputeOperations = true
		cacheEnvironment = true
		netty {
			enabled = true
		}
	}
}

dependencies {
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	annotationProcessor("io.micronaut.security:micronaut-security-annotations")
	implementation("io.micronaut:micronaut-http-client")
	implementation("io.micronaut:micronaut-runtime")
	implementation("io.micronaut:micronaut-validation")
	implementation("io.micronaut.security:micronaut-security")
	implementation("io.micronaut.security:micronaut-security-oauth2")
	implementation("io.micronaut.reactor:micronaut-reactor")
	runtimeOnly("ch.qos.logback:logback-classic")

	// openapi
	annotationProcessor("io.micronaut.openapi:micronaut-openapi:4.3.0")
	implementation("io.swagger.core.v3:swagger-annotations")

	// persistence
	implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")
	annotationProcessor("io.micronaut.data:micronaut-data-processor")
	implementation("io.micronaut.data:micronaut-data-jdbc")
	implementation("io.micronaut.sql:micronaut-jdbc-hikari")
	runtimeOnly("mysql:mysql-connector-java")

	// flyway migration
	implementation("io.micronaut.flyway:micronaut-flyway")
	runtimeOnly("org.flywaydb:flyway-mysql")
}

tasks.withType(JavaExec) {
	classpath += configurations.developmentOnly
	jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
	if (gradle.startParameter.continuous) {
		systemProperties(
				'micronaut.io.watch.restart':'true',
				'micronaut.io.watch.enabled':'true',
				"micronaut.io.watch.paths":"src/main"
		)
	}
}

task runLocal(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = application.mainClassName
	jvmArgs '-Dmicronaut.environments=local'
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
//		  eclipse()
//		  prettier(['prettierettier': '2.0.5', 'prettier-plugin-java': '0.8.0']).config(['parser': 'java', 'tabWidth': 3])
//        googleJavaFormat('1.13.0')
		palantirJavaFormat('2.17.0')
		importOrder()
		removeUnusedImports()
		toggleOffOn()
	}
}
