/*
 * Library
 * This is a library API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.controller;

import example.micronaut.BookEntity;
import example.micronaut.BookRepository;
import example.micronaut.BookSpecifications;
import example.micronaut.model.BookInfo;
import io.micronaut.core.annotation.NonNull;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.util.StringUtils;
import io.micronaut.http.annotation.*;
import io.micronaut.scheduling.TaskExecutors;
import io.micronaut.scheduling.annotation.ExecuteOn;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.List;
import java.util.stream.Collectors;

import static io.micronaut.http.HttpStatus.OK;


@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-07-02T07:34:39.921641-04:00[America/Toronto]")
@Controller
@Tag(name = "Books", description = "The Books API")
public class BooksController {
  private final BookRepository bookRepository;

  public BooksController(BookRepository bookRepository) {
    this.bookRepository = bookRepository;
  }

    /**
     * Add a new book
     *
     * @param bookInfo  (required)
     */
    @Operation(
        operationId = "addBook",
        summary = "Add a new book",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success"),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        },
        parameters = {
            @Parameter(name = "bookInfo", required = true)
        }
    )
    @Post(uri="/add")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    @ExecuteOn(TaskExecutors.IO)
    @Status(OK)
    public void addBook(
        @Body @NotNull @Valid BookInfo bookInfo
    ) {
        bookRepository.save(bookInfo.getName(),
            bookInfo.getAvailability(),
            bookInfo.getAuthor(),
            bookInfo.getISBN());
    }


    /**
     * Search for a book
     *
     * @param bookName  (optional)
     * @param authorName  (optional)
     * @return List&lt;BookInfo&gt;
     */
    @Operation(
        operationId = "search",
        summary = "Search for a book",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "applicaton/json", schema = @Schema(implementation = BookInfo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        },
        parameters = {
            @Parameter(name = "bookName"),
            @Parameter(name = "authorName")
        }
    )
    @Get(uri="/search")
    @Produces(value = {"applicaton/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    @ExecuteOn(TaskExecutors.IO)
    public List<BookInfo> search(
        @QueryValue(value="book-name") @Nullable @Size(min=3) String bookName,
        @QueryValue(value="author-name") @Nullable String authorName
    ) {
        // TODO implement search();
        return searchEntities(bookName, authorName)
            .stream()
            .map(this::map)
            .collect(Collectors.toList());
    }

  private BookInfo map(BookEntity entity) {
    BookInfo book = new BookInfo(entity.getName(), entity.getAvailability());
    book.setISBN(entity.getIsbn());
    book.setAuthor(entity.getAuthor());
    return book;
  }

  @NonNull
  private List<BookEntity> searchEntities(@Nullable String name, @Nullable String author) {
    if (StringUtils.isEmpty(name) && StringUtils.isEmpty(author)) {
      return bookRepository.findAll();
    } else if (StringUtils.isEmpty(name)) {
      return bookRepository.findAll(BookSpecifications.authorLike(author));

    } else  if (StringUtils.isEmpty(author)) {
      return bookRepository.findAll(BookSpecifications.nameLike(name));
    } else {
      return bookRepository.findAll(BookSpecifications.authorLike(author)
          .and(BookSpecifications.nameLike(name)));
    }
  }
}
