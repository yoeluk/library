/*
 * Library
 * This is a library API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.controller;

import static io.micronaut.http.HttpStatus.OK;

import example.micronaut.domain.entity.BookEntity;
import example.micronaut.domain.model.BookInfo;
import example.micronaut.service.BookRepository;
import example.micronaut.service.BookSpecifications;
import io.micronaut.core.annotation.NonNull;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.util.StringUtils;
import io.micronaut.http.annotation.*;
import io.micronaut.scheduling.TaskExecutors;
import io.micronaut.scheduling.annotation.ExecuteOn;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import java.util.List;
import java.util.stream.Collectors;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@Controller
public class BooksController {
    private final BookRepository bookRepository;

    public BooksController(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    /**
     * Add a new book
     *
     * @param bookInfo  (required)
     */
    @Operation(
            operationId = "addBook",
            summary = "Add a new book",
            responses = {
                @ApiResponse(responseCode = "200", description = "Success"),
                @ApiResponse(responseCode = "400", description = "Bad Request")
            })
    @Post(uri = "/add")
    @Secured({SecurityRule.IS_ANONYMOUS})
    @ExecuteOn(TaskExecutors.IO)
    @Status(OK)
    public void addBook(@Body @NotNull @Valid BookInfo bookInfo) {
        bookRepository.save(bookInfo.name(), bookInfo.availability(), bookInfo.author(), bookInfo.ISBN());
    }

    /**
     * Search for a book
     *
     * @param bookName  (optional)
     * @param authorName  (optional)
     * @return List&lt;BookInfo&gt;
     */
    @Operation(
            operationId = "search",
            summary = "Search for a book",
            responses = {
                @ApiResponse(
                        responseCode = "200",
                        description = "Success",
                        content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = BookInfo.class))
                        }),
                @ApiResponse(responseCode = "400", description = "Bad Request")
            })
    @Get(uri = "/search")
    @Secured({SecurityRule.IS_ANONYMOUS})
    @ExecuteOn(TaskExecutors.IO)
    public List<BookInfo> search(
            @QueryValue(value = "bookName") @Nullable @Size(min = 3) String bookName,
            @QueryValue(value = "authorName") @Nullable String authorName) {
        return searchEntities(bookName, authorName).stream().map(this::map).collect(Collectors.toList());
    }

    private BookInfo map(BookEntity entity) {
        return new BookInfo(entity.getName(), entity.getAvailability(), entity.getAuthor(), entity.getIsbn());
    }

    @NonNull
    private List<BookEntity> searchEntities(@Nullable String name, @Nullable String author) {
        if (StringUtils.isEmpty(name) && StringUtils.isEmpty(author)) {
            return bookRepository.findAll();
        } else if (StringUtils.isEmpty(name)) {
            return bookRepository.findAll(BookSpecifications.authorLike(author));

        } else if (StringUtils.isEmpty(author)) {
            return bookRepository.findAll(BookSpecifications.nameLike(name));
        } else {
            return bookRepository.findAll(BookSpecifications.authorLike(author).and(BookSpecifications.nameLike(name)));
        }
    }
}
