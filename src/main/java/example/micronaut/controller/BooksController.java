/*
 * Library
 * This is a library API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import example.micronaut.domain.model.BookInfo;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-07-02T17:23:49.541499-04:00[America/Toronto]")
@Controller
@Tag(name = "Books", description = "The Books API")
public class BooksController {
    /**
     * Add a new book
     *
     * @param bookInfo  (required)
     */
    @Operation(
        operationId = "addBook",
        summary = "Add a new book",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success"),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        },
        parameters = {
            @Parameter(name = "bookInfo", required = true)
        }
    )
    @Post(uri="/add")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<Void> addBook(
        @Body @NotNull @Valid BookInfo bookInfo
    ) {
        // TODO implement addBook();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Search for a book
     *
     * @param bookName  (optional)
     * @param authorName  (optional)
     * @return List&lt;BookInfo&gt;
     */
    @Operation(
        operationId = "search",
        summary = "Search for a book",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "applicaton/json", schema = @Schema(implementation = BookInfo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        },
        parameters = {
            @Parameter(name = "bookName"),
            @Parameter(name = "authorName")
        }
    )
    @Get(uri="/search")
    @Produces(value = {"applicaton/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<List<BookInfo>> search(
        @QueryValue(value="book-name") @Nullable @Size(min=3) String bookName, 
        @QueryValue(value="author-name") @Nullable String authorName
    ) {
        // TODO implement search();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
