/*
 * Library
 * This is a library API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package example.micronaut.model;

import java.util.Objects;
import java.util.Arrays;
import example.micronaut.model.BookAvailability;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Object containg all the info about a book
 */
@Schema(name = "BookInfo", description = "Object containg all the info about a book")
@JsonPropertyOrder({
  BookInfo.JSON_PROPERTY_NAME,
  BookInfo.JSON_PROPERTY_AVAILABILITY,
  BookInfo.JSON_PROPERTY_AUTHOR,
  BookInfo.JSON_PROPERTY_I_S_B_N
})
@JsonTypeName("BookInfo")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2022-07-02T07:34:39.921641-04:00[America/Toronto]")
@Introspected
public class BookInfo {
    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_AVAILABILITY = "availability";
    private BookAvailability availability;

    public static final String JSON_PROPERTY_AUTHOR = "author";
    private String author;

    public static final String JSON_PROPERTY_I_S_B_N = "ISBN";
    private String ISBN;

    public BookInfo(String name, BookAvailability availability) {
        this.name = name;
        this.availability = availability;
    }

    public BookInfo name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     * @return name
     **/
    @NotNull
    @Schema(name = "name", required = true)
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public BookInfo availability(BookAvailability availability) {
        this.availability = availability;
        return this;
    }

    /**
     * Get availability
     * @return availability
     **/
    @NotNull
    @Schema(name = "availability", required = true)
    @JsonProperty(JSON_PROPERTY_AVAILABILITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BookAvailability getAvailability() {
        return availability;
    }

    @JsonProperty(JSON_PROPERTY_AVAILABILITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAvailability(BookAvailability availability) {
        this.availability = availability;
    }

    public BookInfo author(String author) {
        this.author = author;
        return this;
    }

    /**
     * Get author
     * @return author
     **/
    @Nullable
    @Size(min=3)
    @Schema(name = "author", required = false)
    @JsonProperty(JSON_PROPERTY_AUTHOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAuthor() {
        return author;
    }

    @JsonProperty(JSON_PROPERTY_AUTHOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAuthor(String author) {
        this.author = author;
    }

    public BookInfo ISBN(String ISBN) {
        this.ISBN = ISBN;
        return this;
    }

    /**
     * Get ISBN
     * @return ISBN
     **/
    @Nullable
    @Pattern(regexp="[0-9]{13}")
    @Schema(name = "ISBN", required = false)
    @JsonProperty(JSON_PROPERTY_I_S_B_N)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getISBN() {
        return ISBN;
    }

    @JsonProperty(JSON_PROPERTY_I_S_B_N)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setISBN(String ISBN) {
        this.ISBN = ISBN;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BookInfo bookInfo = (BookInfo) o;
        return Objects.equals(this.name, bookInfo.name) &&
            Objects.equals(this.availability, bookInfo.availability) &&
            Objects.equals(this.author, bookInfo.author) &&
            Objects.equals(this.ISBN, bookInfo.ISBN);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, availability, author, ISBN);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BookInfo {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
        sb.append("    author: ").append(toIndentedString(author)).append("\n");
        sb.append("    ISBN: ").append(toIndentedString(ISBN)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
